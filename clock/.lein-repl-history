(= [1 2] 
     '(1 2))
(mod 34 24)
(mod 22 24)
(mod -2 24)
(mod -54 24)
(format "%01d" 4)
(format "Pad with leading zeros %07d" 5432)
(format "%04d" 4)
(format "%02d" 4)
(format "%02d" 24)
(+ 20 -40)
&
7
(mod -20 60)
(quot 20 -40)
(quot -40 20)
(+ 40 30)
(quot 70 60)
(mod 70 60)
(+ 40 -60)
(mod 40 -60)
(mod -54 24)
(mod -20 60)
(quot -20 60)
(quot 20 60)
(quot 60 20)
(quot -60 60)
(quot -120 60)
(require 'clock :reload)
(clock/add-time [12 40] 20)
(clock/add-time [12 40] 30)
(require 'clock :reload)
(clock/add-time [12 40] 30)
(clock/add-time [12 40] 20)
(clock -12 -268)
(clock/clock -12 -268)
(require 'clock :reload)
(clock/clock -12 -268)
(clock/clock -12 -28)
(clock/clock -12 28)
(clock/clock 12 28)
(quot 268 60)
(clock/clock 12 268)
(require 'clock :reload)
(clock/clock -12 -28)
(clock/clock -12 28)
(clock/clock 12 28)
(clock/clock -12 -268)
(clock/clock -12 268)
(clock/clock -54 -11513)]
(clock/clock -54 -11513)
(mod -54 24)
(require 'clock :reload)
(clock/clock -54 -11513)
(require 'clock :reload)
(clock/clock -54 -11513)
(require 'clock :reload)
(clock/clock -54 -11513)
(require 'clock :reload)
(clock/clock -54 -11513)
(clock/add-time (clock/clock 18 7) -110)
(clock/clock 18 7)
(clock/add-time (clock/clock 18 7) 20)
(clock/clock->string (clock/clock 18 7))
(require 'clock :reload)
(clock/add-time (clock/clock 18 7) 20)
(def c (clock/clock 18 7))
c
(clock/add-time c 0)
(require 'clock :reload)
(def c (clock/clock 18 7))
(clock/add-time c 9)
(require 'clock :reload)
(def c (clock/clock 18 7))
(clock/add-time c 12)
(let [[h m] clock] (clock/clock h m))
(let [[h m] c] (clock/clock h m))
([18 7] 2 3)
([18 7] 1)
(require 'clock :reload)
(clock/add-time (clock/clock 18 7) 20)
(quot 1440 60)
