(-> [1 2 3] + (map inc)) 
(-> [1 2 3] (map inc)) 
(-> 1 inc) 
(-> 1 inc (str "")) 
(-> [1 2 3] (map inc)) 
(-> 1 inc (str "")) 
(->> 1 inc (str "")) 
(inc "1)
(inc "1")
(->> [1 2 3] (map inc)) 
(->> 1 inc (str "a")) 
(-> 1 inc (str "a")) 
(peek [1 2 3])
(pop [1 2 3])
(butlast [1 2 3])
(conj (pop [1 2 3]) 4)
(replace [1 2 3] 3 4)
(update [1 2 3] -1 inc)
(update [1 2 3] 2 inc)
(len [1 2 3])
(size [1 2 3])
(conj (pop [1 2 3]) 4)
(require [run-length-enconding :as rle])
(require ['run-length-enconding :as rle])
(require '[run-length-enconding :as rle])
(require '[run-length-encoding :as rle])
(rle/run-length-encode "aabbbccc")
(first [1 2])
(second [1 2])
(def [l r] [1 2])
(let [[l r] [1 2]] [r l])
(let [{:l :r} {:l 1 :r 2}] [r l])
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-encode "aabbbcccc)
(rle/run-length-encode "aabbbcccc)"
)
(rle/run-length-encode "aabbbcccc")
(repeat 5 \a)
(apply str (repeat 5 \a))
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-encode "aabbbcccc")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-encode "aabbbcccc")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-encode "aabbbcccc")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-encode "aabbbcccc")
(number? "2")
(number? (.parseInt "2"))
(int "2")
(num "2")
(re-seq "2a3b4c")
(re-seq #"\d" "2a3b4c")
(re-seq #"\d.(*)" "2a3b4c")
(re-seq #"\d.(\s)" "2a3b4c")
(re-seq #"\d.(\S)" "2a3b4c")
(re-seq #"\d(\S)" "2a3b4c")
(re-seq #"\d(\S)" "2ab4c")
(re-seq #"\d(\S+)" "2ab4c")
(Integer/parseInt "a")
(try (Integer/parseInt "a") (catch Error e "foo"))
(try (Integer/parseInt "a") (catch Exception e "foo"))
(re-find #"\d" "a")
(re-find #"\d" "1")
(re-find #"\d+" "21a3b4c")
(re-seq #"\d+" "21a3b4c")
(re-seq #"\d+" "21ab4c")
(re-find #"\d+" \2)
(re-find #"\d+" "\2")
)
(re-find #"\d+" "2")
(map str "abc")
(map identity "abc")
(and "a" "b")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(require '[run-length-encoding :as rle] :reload)
(rle/run-length-decode "21ab4c")
(rle/run-length-decode "2a3b4c")
(re-seq #"[\d]*?[\D]" "12a3b4c")
(re-seq #"[\d]*?[\D]" "12ab4c")
(identity 5)
(partition-by identity "abc")
(partition-by identity "aaabbccccc")
