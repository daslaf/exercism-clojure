(require 'grade-school :reload)
(grade-school/add {} "Aimme" 2)
(update {} 2 "Aimee")
(update {} 2 #("Aimee"))
(update {} 2 (fn [] "Aimee"))
(update {2 "Bob"} 2 (fn [] "Aimee"))
(update {2 "Bob"} 2 (fn [old] "Aimee"))
(update {} 2 (fn [old] "Aimee"))
(update {} 2 (fn [old] (vec "Aimee")))
(update {} 2 (fn [old] (conj old "Aimee")))
(update {2 ["Bob"]} 2 (fn [old] (conj old "Aimee")))
(update {2 ["Bob"]} 2 (fn [old] (conj (or old []) "Aimee")))
(update {} 2 (fn [old] (conj (or old []) "Aimee")))
(-> db
             (grade-school/add "James" 2)
             (grade-school/add "Blair" 2)
(require 'grade-school :reload)
(-> {}
             (grade-school/add "James" 2)
             (grade-school/add "Blair" 2)
             (grade-school/add "Paul" 2))
(require 'grade-school :reload)
(grade-school/grade {} 1)
  (get 1 {} [])
  (or ({} 1) [])
(require 'grade-school :reload)
(grade-school/grade {} 1)
(grade-school/grade {1 ["Bob"]} 1)
(get 1 {1 ["Bob"]} [])
(get {1 ["Bob"]} 1 [])
(sorted-map {2 "a" 1 "b"})
(sorted-map 2 "a" 1 "b")
(keys {1 2, 3 4})
(values {1 2, 3 4})
(seq {1 2, 3 4})
(mapcat identity (seq {1 2, 3 4}))
(apply sorted-map (mapcat identity (seq {1 2, 3 4})))
(apply sorted-map (mapcat identity (seq {34 "a", 3 "})))
(apply sorted-map (mapcat identity (seq {34 "a", 3 "b"})))
(apply sorted-map (mapcat sort (seq {34 [2 1], 3 [4 5 2]})))
(apply sorted-map (mapcat (fn [pair] pair) (seq {34 "a", 3 "b"})))
(apply sorted-map (mapcat (fn [pair] (do (println pair) pair)) (seq {34 "a", 3 "b"})))
(apply sorted-map (mapcat (fn [[k, v]] [k (sort v)]) (seq {34 "a", 3 "b"})))
(apply sorted-map (mapcat (fn [[k, v]] [k (sort v)]) (seq {34 "back", 3 "bfoa"})))
(vec 1 2)
(vector 1 2)
