(quot 7 2)
(quot 6 2)
(def short-vector [1, 3, 4, 6, 8, 9, 11])
(take (quot short-vector 2) short-vector)
(take (quot (count short-vector) 2) short-vector)
(drop (quot (count short-vector) 2) short-vector)
(drop (inc (quot (count short-vector) 2)) short-vector)
(require 'binary-search :reload)
(binary-search/search-for 4 [4])
(def short-vector [1, 3, 4, 6, 8, 9, 11])
(binary-search/search-for 9 short-vector)
(short-vector 0)
(require 'binary-search :reload)
(binary-search/search-for 9 short-vector)
(require 'binary-search :reload)
(binary-search/search-for 9 short-vector)
(require 'binary-search :reload)
(binary-search/search-for 9 short-vector)
(binary-search/search-for 6 short-vector)
(binary-search/search-for 5 short-vector)
(require 'binary-search :reload)
(binary-search/search-for 9 short-vector)
(binary-search/search-for 5 short-vector)
(binary-search/search-for 4 short-vector)
(require 'binary-search :reload)
(binary-search/search-for 4 short-vector)
(take 3 (list 1 2 3 4 5))
(require 'binary-search :reload)
(binary-search/search-for 4 short-vector)
(lazy-seq 1 2 3)
(binary-search/search-for 4 short-vector)
(require 'binary-search :reload)
(binary-search/search-for 4 short-vector)
('(1 2 3) 0)
([1 2 3] 0)
(0 [1 2 3])
(get 0 '(1 2 3))
(nth 0 '(1 2 3))
(nth '(1 2 3) 0)
(require 'binary-search :reload)
(binary-search/search-for 4 short-vector)
(require 'binary-search :reload)
(binary-search/search-for 4 short-vector)
(subvec [1 2 3] 0 2)
(subvec short-vector 2 3)
(require 'binary-search :reload)
(binary-search/search-for 4 short-vector)
(require 'binary-search :reload)
(binary-search/search-for 3 [1 3 4 6 7 8 9])
(binary-search/search-for 4 [1 3 4 6 7 8 9])
(binary-search/search-for 3 [2 3])
(binary-search/search-for 3 [2 3 4])
(binary-search/search-for 3 [1 2 3 4])
(binary-search/search-for 3 [1 3 4 5])
(binary-search/search-for 3 [1 3 4 5 5])
(binary-search/search-for 4 [1 3 4 5 6 7 8])
(require 'binary-search :reload)
(binary-search/search-for 4 [1 3 4 5 6 7 8])
(subvec [1 3 4 5 6 7 8] 2 3)
(require 'binary-search-test :reload)
(binary-search-test/it-finds-position-of-middle-item)
(require 'binary-search-test :reload)
(binary-search-test/it-finds-position-of-middle-item)
(require 'binary-search-test :reload)
(binary-search-test/searches-a-singleton)
(binary-search-test/it-finds-position-of-search-data)
(require 'binary-search:reload)
(require 'binary-search :reload)
(require 'binary-search-test :reload)
(binary-search-test/it-finds-position-of-search-data)
(require 'binary-search :reload)
(require 'binary-search-test :reload)
(binary-search-test/it-finds-position-of-search-data)
(require 'binary-search-test :reload)
(require 'binary-search :reload)
(require 'binary-search-test :reload)
(binary-search-test/it-finds-position-of-search-data)
(subvec [ 1 2 3 4] 1 1)
(subvec [1, 3, 4, 6, 8, 9, 11] 7 7)
$1
(middle (subvec [1, 3, 4, 6, 8, 9, 11] 7 7))
(binary-search/middle (subvec [1, 3, 4, 6, 8, 9, 11] 7 7))
(require 'binary-search :reload)
(binary-search/middle (subvec [1, 3, 4, 6, 8, 9, 11] 7 7))
((subvec [1, 3, 4, 6, 8, 9, 11] 7 7) (binary-search/middle (subvec [1, 3, 4, 6, 8, 9, 11] 7 7)))
(binary-search/middle (subvec [1, 3, 4, 6, 8, 9, 11] 7 7))
([] 0)
(nth [] 0)
(range 10)
(drop 4 (range 10)
)
(drop (4) (range 10))
(drop (inc4) (range 10))
(drop (inc 4) (range 10))
(take (- 10 7)  (drop (inc 4) (range 10)))
(take 5 (drop (inc 4) (range 10)))
(take 4 (drop (inc 4) (range 10)))
(take 4 (drop (inc 0) (range 10)))
