(java.time.Month 1)
(java.time.Month. 1)
(java.time.Month)
java.time.Month
(java.time.Month 1)
(java.time.Month. 1)
(java.time.Month/of 1)
(.firstDayOfYear (java.time.Month/of 1) 2021)
(java.time.LocalDate.)
(java.time.LocalDate)
(java.time.LocalDate/getDayOfWeek)
(java.time.LocalDate/of 2021 java.time.Month/AUGUST 22)
(def today (java.time.LocalDate/of 2021 java.time.Month/AUGUST 22))
(.getDayOfWeek today)
(.getValue (.getDayOfWeek today))
(java.time.Month/of 1)
(def today (java.time.LocalDate/of 2021 1 22))
today
(require 'meetup :reload)
(meetup/month-starts-at 2021 8)
(require 'meetup :reload)
(meetup/month-starts-at 2021 8)
(def day {1 :monday})
(day 1)
(day :monday)
(clojure.set/map-invert day)
((clojure.set/map-invert day) 1)
((clojure.set/map-invert day) :monday)
([:monday] :monday)
([:monday] 0)
(sorted-set :monday :tuesday)
(def days (sorted-set :monday :tuesday))
(days 0)
(days :monday)
(java.time.Month/of 1)
(require 'meetup :reload)
(meetup/month-starts-at 2021 8)
(require 'meetup :reload)
(meetup/month-starts-at 2021 8)
((map-invert day) :monday)
((clojure.set/map-invert day) :monday)
(count {:a 1 :b 2})
(require 'meetup :reload)
(meetup/get-number-of-first-type-of-day [2021 8 :monday])
(meetup/get-number-of-first-type-of-day 2021 8 :monday)
(require 'meetup :reload)
(meetup/get-number-of-first-type-of-day 2021 8 :monday)
(require 'meetup :reload)
(meetup/get-number-of-first-type-of-day 2021 8 :monday)
(require 'meetup :reload)
(meetup/get-number-of-first-type-of-day 2021 8 :monday)
(require 'meetup :reload)
(meetup/get-number-of-first-type-of-day 2021 8 :monday)
(meetup/get-number-of-first-type-of-day 2021 8 :sunday)
(meetup/get-number-of-first-type-of-day 2021 8 :saturday)
(require 'meetup :reload)
(meetup/get-number-of-first-type-of-day 2021 8 :saturday)
(meetup/get-number-of-first-type-of-day 2021 8 :sunday)
(meetup/get-number-of-first-type-of-day 2021 8 :monday)
(mod 13 12)
(mod 12 12)
(require 'meetup :reload)
(meetup/month-ends-at 2021 8)
(defn dosomething [p]
(condp = p
1 "one"
2 "two"
:else "not one nor two"
))
(dosomething 1)
(dosomething 2)
(dosomething "foo")
(defn dosomething [p]
(case p
1 "one"
2 "two"
"not one nor two"))
(dosomething "foo")
(dosomething 2)
(dosomething 1)
([:first] :first)
(at [:first] :first)
(.indexOf [:first] :first)
(require 'meetup :reload)
(meetup/get-number-of-first-type-of-day 2021 8 :monday)
(meetup/get-number-of-first-type-of-day 2021 8 :sunday)
(require 'meetup :reload)
(meetup/get-number-of-first-type-of-day 2021 8 :sunday)
(meetup/get-number-of-first-type-of-day 2021 8 :saturday)
(meetup/get-number-of-first-type-of-day 2021 7 :saturday)
(meetup/get-number-of-first-type-of-day 2021 7 :friday)
(meetup/get-number-of-first-type-of-day 2021 7 :tuesday)
(meetup/get-number-of-last-type-of-day 2021 8 :monday)
(meetup/get-number-of-last-type-of-day 2021 8 :tuesday)
(meetup/get-number-of-last-type-of-day 2021 8 :wednesday)
(meetup/get-number-of-last-type-of-day 2021 8 :thursday)
(meetup/get-number-of-last-type-of-day 2021 8 :friday)
(meetup/get-number-of-last-type-of-day 2021 8 :saturday)
(meetup/get-number-of-last-type-of-day 2021 8 :sunday)
(require 'meetup :reload)
(meetup/get-number-of-last-type-of-day 2021 8 :monday)
(meetup/get-number-of-last-type-of-day 2021 8 :tuesday)
(meetup/get-number-of-last-type-of-day 2021 8 :wednesday)
(meetup/get-number-of-last-type-of-day 2021 8 :thursday)
(meetup/get-number-of-last-type-of-day 2021 8 :friday)
(meetup/get-number-of-last-type-of-day 2021 8 :saturday)
(meetup/get-number-of-last-type-of-day 2021 8 :sunday)
(require 'meetup :reload)
(meetup/get-number-of-first-type-of-day 2021 8 :monday)
(meetup/get-number-of-first-type-of-day 2021 8 :sunday)
(meetup/get-number-of-first-type-of-day 2021 8 :saturday)
